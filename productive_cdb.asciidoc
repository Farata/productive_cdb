= Productive Enterprise Web Development with ExtJs and Clear Data Builder = 
Viktor Gamov
2013-01-30
:icons:
:data-uri:
:Email:     viktor.gamov@faratasystems.com
:Revision:  0.1

It's not likely that you'll start developing an enterprise HTML5 applicationa without using one of the JavaScript frameworks. One of the most feature complete frameworks is ExtJS from Sencha, but its learning curve is a bit steep. Our company, http://faratasystems.com[Farata Systems], has developed an open source Eclipse plugin called Clear Data Builder (CDB). This is a productivity tool - a code generator - that can create a CRUD application for you in no time. This application will have HTML/JavaScript/ExtJS client and Java-based server. In this article you will learn how jump start development of such Web applications. 

== Part One: ExtJS MVC Application Scaffolding ==

In part one I'll cover the following topics:

- What is Clear Data Builder
- How to create ExtJS MVC application for Java-based project
- How deploy and run your first ExtJS+Java application on Apache Tomcat server

To be more productive means to write less code and produce the results faster. This is what CDB is for. in this article you'll see how Clear Data Builder helps you to integrate the client side with the back end using the RPC style and how to implements data pagination for your application.

CDB distribution available as plug-in for Eclipse IDE. The current update site of CDB is located http://cleartoolkit.com/downloads/plugins/extjs/cleardatabuilder/4.1.4/[here].  The current version is 4.1.4 (don't be surprised - this is a five-year old code generator, and its previous versions were made for generating the UI for Adobe Flex framework). You can install this plug-in via +Install New Software+ menu in Eclipse IDE. The <<FIG_1>> shows how you can validate plug-in installation. If you see "Clear Data Builder for EXTJS feature" in the list of Installed Software in your Eclipse IDE, you're good to go.

IMPORTANT: You have to have "Eclipse for Java EE Developers" installed, which includes the plugins for automation of the Web applications.

[[FIG_1]]
.Verifying CDB installation
image:fig_01.png[image]

Clear Data Builder comes with a set of prepared examples that demonstrate the integration with popular Java frameworks - MyBatis, Hibernate, and Spring. Also, a plain Java project example that doesn't use any of the frameworks is available as well. Let's start with the creation of the new project by selecting the menu File -> New -> Other -> Clear, and then press Next. 

[[FIG_2]]
.New CDB Project Wizard
image:fig_02.png[image]

First of all let's call the new project +episode_1_intro+. CDB supports different ways of linking ExtJS framework to the application. In my case, I already have installed ExtJS libraries under my Web server (Apache Tomcat). We're going to use this local ExtJS URL, but you can just specify any folder in your machine and CDB will copy the ExtJS file inside your project. Lastly, you can use ExtJS from the Sencha's CDN, if you don't want to store these libraries inside your project. Besides, using a common CDN will allow Web browser to reuse the cached version of ExtJS. 

For this project we are not going to use any server-side (like MyBatis or Hibernate). Just click the button Finish. First of all, CDB will print some initial messages on the Eclipse console. When CDB runs for the first time it initializes directory structure in the +WebContent+ folder. Inside the WebContent directory CDB creates directory structure which is recommended by Sencha for MVC applications. Also you'll get the HTML wrapper - +index.html+ - for this application, which contains the link to the entry point of our application. 

CDB generates an empty project with one sample controller and one view - +Viewport.js+. To run this application, you need to add the newly generated Dynamic Web Project to Tomcat and start the server (write-click on the Tomcat in the Servers view).  

[[FIG_5]]
.Adding web project to Tomcat
image:fig_05.png[image]

Let me switch to web browser to open this application on +http://localhost:8080/episode_1_intro+ . Voila! Just in couple minutes we've setup new Dynamic Web Project with the ExtJS framework support and one fancy button on UI.

[[FIG_2]]
.Running scaffolded application
image:fig_03.png[image]

The next step is to make something useful out of this basic application.

== Part Two: Generating a CRUD application ==

CRUD stands for Create-Retrieve-Update-Delete. It's a well known term for describing the applications that support data manipulation. They can retrieve the data from some data source and update them too. The Part Two agenda is covering exactly this:

- Create a simple CRUD ExtJS+Java application
    * Create a POJO and corresponding `Ext.data.Model`
    * Create s Java service and populate `Ext.data.Store` with data from service
    * Use the auto-generated ExtJS application
    * Extend the auto-generated CRUD methods
    * Use *ChangeObject*

Now I would like to show how to use Clear Data Builder to create CRUD applications. I'll show you how you can turn your Java POJO class into the ExtJS model. I'll explain the following:

* how you can populate the ExtJS store from a remote service
* how you can use automatically generated UI for that application
* how you can extend it
* what the `ChangeObject` class is for

I will extend the application from Part 1. For my CRUD application I need a Java POJO.  First, I've created the class +Person.java+ in the package `dto`. Then I've added the fields `firstName`, `lastName`, `address`, `ssn` and `phone` and `id`. Also I need getters and setters for these fields. It's good to have a constructor for the that uses these fields,  and a DTO class should have a `toString()` method. <<LISTING_1>> 
Now I need the same corresponding ExtJS model for my +Person+. Just annotate this class with the CDB annotation called `@JSClass` to ask CDB to generate the ExtJS model. 

[[LISTING_1]]
[source,java]
-----------------------------------------------------
include::Person.java[]
-----------------------------------------------------

Now I need to annotate the `id` field with the CDB annotation `@JSGeneratedId`. With this annotation I'll instruct CDB to threat this field as auto generated id. Let's examine the directory of ExtJS MVC application and lets take a look inside the model folder. Inside the model folder (the JavaScript section) we have the folder dto which corresponds to the Java +dto+ package where the class +Person.java+ resides. 

<vik>

[[FIG_4]]
.Generated from Java class ExtJS model
image:fig_04.png[image]

As you can see Clear Data Builder generated two files. CDB uses the  http://martinfowler.com/dslCatalog/generationGap.html[Generation Gap pattern], which is about keeping the generated and handwritten parts separate by putting them in different classes linked by inheritance. Let's open the person model. In our case the +Person.js+ is extended from the generated +_Person.js+. Should we need to customize this class, we'll do it inside the +Person.js+, but this underscore-prefixed file will be regenerated each and every time when we change something in our model. <vik> CDB follows this pattern for all generated artifacts - java services, ExtJS modes and stores. </vik>

As you can see here this model contains all the fields from our Person dto. 

Now we need to create the Java service to populate the ExtJS store with the data. Let's create interface in the package `service` with the name `PersonService`. 

For example purposes, my service need to return list on persons. This interface contains one method -`List<Person> getPersons()`. 

I need to tell CDB that I would like to expose this service as the remote object. For this I use the annotation called `@JSService`. Also I need to tell to CDB that I would like to generate store. For this I'll use annotation `@JSGenetareStore`. In this case CDB will create "destination-aware store". This means that store will know from where to populate it's content. All configuration of store's proxies will be handled by code generator. With `@JSFillMethod` annotation we will indicate out main read method (remember R from CRUD). 
Also it would be nice to have some sort of UI to test how this service is working.  For this I will use annotation called `@JSGenerateSample`. At this point, Clear Data Builder will examine this file, will find this annotations and will generate ExtJS MVC artifacts (models, views, controller) with Sample application. 

[source,java]
----------------------------------------------------------------------
@JSService
public interface PersonService {
    @JSGenerateStore
    @JSFillMethod
    @JSGenerateSample
    List<Person> getPersons();
}
----------------------------------------------------------------------

After CDB done with code generation we got the implementation for my service - `PersonServiceImpl`. Let's check our +store+ folder inside application folder (+WebContent\app+). We got this store which is bind to +Person+ model. And my person model was generated previously. In this case  Clear Data Builder generated store that binds to the remote service. 

All this intermediate translation from the JavaScript to Java and from Java to JavaScript done by DirectJNgine. This is the server side implementation of Ext Direct Protocol. You will find links and can read about this protocol in http://www.sencha.com/products/extjs/extdirect[official documentation]. 
Here is a cool thing - Clear Data Builder generates UI for us!  Let's check +samples+ directory <<FIG_07>>

[[FIG_7]]
.Folder with generated samples
image:fig_07.png[image]

We can found +SampleController+ and +SampleGrid+ panel inside the samples folder. And Clear Data Builder also generates application entry - +sampleApp.js+. To test this we need just copy +SampleController.js+ in +controller+ folder, +SampleGrid.js+ panel in the +view+ folder, and sample application in the root of our +WebContent+ folder. We need change application entry point with sampleApp.
This is our sample application <<FIG-8>>

[[FIG_8]]
.Scaffolded CRUD application template
image:fig_08.png[image]

Let's return to our server side code. As I mentioned before, for services CDB also following the _Generation Gap Pattern_ and Clear Data Builder also generated stubs for our service methods. And if we need to _implement_ our CRUD functionality we need to override this methods <<LISTING_7>>. 

[[LISTING_7]]
[source,java]
----------------------------------------------------------------------
include::2_PersonServiceImpl.java[]
----------------------------------------------------------------------
<1> 
<2> I need to generate of in-memory objects. In this case I want to insert in-line data and I would use default constructor with fields to populate data. 
<3> `getPerson` is our Read method.
<4> +fillmethod++`doCreate()` is our create method.
<5> +fillmethod++`doUpdate` is our update method 
<6> +fillmethod++`doDelete` is our delete method.     
<7>      

When I click +Load+ we get 4 persons from our server side. How to send data back. 
The Clear Data Builder generates code that you can easily extend. So once you want to add something we can enter data directly into grid. In this case, new instance of PersonModel will be created and added to store. And when I click Sync button changes will be sent to corresponding remote method. Data was processed on the server and Clear Data Builder injects this data in form of `ChangeObject`. It is a class (part of ClearToolkit server side component). When you need to read data that comes from the client side you just need to use `changeObject.getNewVersion()` and this method will return object that you need to deserialize into your actual domain object - Person. After that you can do what ever you want to do it - persist it in database, send over the wire with JMS and etc.

</vik>

== Part Three: Data Pagination ==

The pagination feature is needed in almost every enterprise web application. Often you don't want to bring all the  data to the client at once - a page by page feeds is a lot more responsive. The user can navigate back and forth between the pages using pagination UI components. To do that, we need to split our data on the server side into chunks so we can display it only once specific page is required. Implementing pagination is the agenda for the Part Three of this article. Here's the plan:

* Add the  data pagination to our sample CRUD ExtJS+Java application:

    ** Add the `Ext.toolbar.Paging` component
    ** Bind both _grid_ and _pagingtoolbar_ to the same store
    ** Use `DirectOptions` class to read the pagination parameters

We are going to extend our CRUD application by adding the paging toolbar component bound to the same store as the grid. The class `DirectOptions` will handle pagination parameters on the server side. 

In Part 1 and 2 you've learned how to generate the UI from the Java back end service and how to generate the ExtJS store and ExtJS model.  In this part you'll how to add the pagination functionality to our CRUD  application by asking the server to send only portions of data. I'll need to refactor the service code from previous example to generate a little bit more data than only five records. <<LISTING_2>>

[[LISTING_2]]
[source,java]
----------------------------------------------------------------------
public class PersonServiceImpl extends _PersonServiceImpl {
  @Override
    public List<Person> getPersons() {
        List<Person> result = new ArrayList<>();
        for (int i=0; i<1000; i++){
            result.add(new Person(i, "Joe", "Doe", "555-55-55", "1111-11-1111"));
        }
        return result;
    }   
}
----------------------------------------------------------------------

The Google Chrome Console shows that `PersonStore` was populated with one thousand records. Let's add the pagination component using the Ext `toolbarpaging` component. Let's add it to the file +sampleApp.js+ <<LISTING_3>>. 

<vik>

[[LISTING_3]]
[source,javascript]
-----------------------------------------------------
include::sampleApp.js[]
-----------------------------------------------------

<1> Let's manually instantiate this store. I'll create a separate variable `myStore` for this store and with empty +config+ object. 
<2> I'll add the +xtype+ `pagingtoolbar` to this component docked items property.  I would like to display the information and dock this element at the top.
<3> Now paging toolbar now also connected to same store.

Now we need to fix automatically generated controller to control loading of data on 
click of +Load+ button. 

[[LISTING_4]]
[source,javascript]
-----------------------------------------------------
include::SampleController.js[]
-----------------------------------------------------

<1> We can get store instance bind to our grid panel. In controller's `refs` property I'm referencing out `simplegrid` panel with `ThePanel` alias.
<2> In this case I don't need explicitly retrieve store instance by name. Instead, we can use automatically generated by ExtJS framework getter `getPanel()` and `getStore()`.

Right now the pagination doesn't work and each and every time we are receiving one thousand records, because there is no server side is not aware about pagination requirements. Let's fix it <<LISTING_5>> . 

In this case lets go to Network information and we will actually what information has been sent to the server when user clicks on the forward and backward. In this case I need to examine the direct provider URL and see how the request looks like. We see that each and every time when user clicks on the forward or backward this component sends `directOptions`. 

[[FIG_6]]
.Request payload details
image::fig_06.png[image]

It's the small extension, small plug-in of Clear JS to add this functionality to ExtJS direct store component. At this point, we start using these direct options on the server side to easily get information about page's boundaries. Let's return to `PersonServiceImpl` code and let me put some extra code here. 

[[LISTING_5]]
[source,java]
----------------------------------------------------------------------
include::PersonServiceImpl.java[]
----------------------------------------------------------------------
<1> On the server side there is a special object available called DirectOptions. And DirectOptions is a part of Clear Toolkit server side components.
<2> I'm interesting in +start+ and in +limit+ options that we saw on <<FIG_6>> .
<3> I need to calculate actual limit if the size of our collection is less than page size (`start+limit`) we can assign the size of this collection to the `limit` variable.
<4> Also we need notify the component about total amount of elements on the server side. For this I can use DirectOptions setOption, total and this is size of our initial data set not the paged.
<5> And before I'll return the result I need to create subset, actual page of data. In this case I need to use method of list called  Sublist and start from start and from limit. And let assign result and lets see how our application is working. 

As you can see, we loaded only 25 elements on one page. When I click +Next+ or +back+ buttons I get only paged information.
The Google Chrome Network tab shows that that we are sending +start+ and +limit+ every time and our response contains object with 25 elements.

</vik>

If you'd like to repeat all of the above steps on you own watch http://faratasystems.com/training-at-farata-youtube-chanel/[the screencasts] where I perform all the actions described in this article.

=== Additional Useful Links ===

* http://farata.github.com/ClearJS/[Clear Toolkit on Github]
* http://cleartoolkit.com/downloads/plugins/extjs/cleardatabuilder/4.1.4/[Clear Data Builder Eclipse update site]
* http://docs.sencha.com/ext-js/4-1/#!/guide/application_architecture[ExtJS MVC Application Architecture]
* http://docs.sencha.com/ext-js/4-1/#!/api/Ext.data.Model[Ext.data.Model]
* http://docs.sencha.com/ext-js/4-1/#!/api/Ext.data.Store[Ext.data.Store]
* http://docs.sencha.com/ext-js/4-1/#!/guide/grid[ExtJS Grid Panel]
* http://docs.sencha.com/ext-js/4-1/#!/api/Ext.toolbar.Paging[Ext.toolbar.Paging]
* http://www.sencha.com/products/extjs/extdirect[Ext Direct]
* https://code.google.com/p/directjngine/[DirectJNgine: Direct for Java]
* https://github.com/Farata/ClearJS/wiki/Change-Object%3A-Synchronization-Keystone[Change Object: Synchronization Keystone]
* https://github.com/Farata/ClearJS/wiki/Data-Pagination[Data Pagination in Clear Toolkit]