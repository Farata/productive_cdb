= Productive Enterprise Web Development with ExtJs and Clear Data Builder = 
Viktor Gamov
2013-01-30
:icons:
:data-uri:
:Email:     viktor.gamov@faratasystems.com
:Revision:  0.1

It's not likely that you'll start developing an enterprise HTML5 applicationa without using one of the JavaScript frameworks. One of the most feature complete frameworks is ExtJS from Sencha, but its learning curve is a bit steep. Our company, ( http://faratasystems.com[Farata Systems] ) has developed an open source Eclipse plugin called Clear Data Builder (CDB). This is a productivity tool - a code generator - that can create a CRUD application for you in no time. This application will have HTML/JavaScript/ExtJS client and Java-based server. In this article you will learn how jump start development of such Web applications. 

== Part One: ExtJS MVC Application Scaffolding ==

In part one I'll cover the following topics:

- What is Clear Data Builder
- How to create ExtJS MVC application for Java-based project
- How deploy and run your first ExtJS+Java application on Apache Tomcat server

To be more productive means to write less code and produce the results faster. This is what CDB is for. in this article you'll see how Clear Data Builder helps you to integrate the client side with the back end using the RPC style and how to implements data pagination for your application.

CDB distribution available as plug-in for Eclipse IDE. The current update site of CDB is located http://cleartoolkit.com/downloads/plugins/extjs/cleardatabuilder/4.1.4/[here].  The current version is 4.1.4 (don't be surprised - this is a five-year old code generator, and its previous versions were made for generating the UI for Adobe Flex framework). You can install this plug-in via +Install New Software+ menu in Eclipse IDE. The <<FIG_1>> shows how you can validate plug-in installation. If you see "Clear Data Builder for EXTJS feature" in the list of Installed Software in your Eclipse IDE, you're good to go.

IMPORTANT: You have to have "Eclipse for Java EE Developers" installed, which includes the plugins for automation of the Web applications.

[[FIG_1]]
.Verifying CDB installation
image:fig_01.png[image]

Clear Data Builder comes with a set of prepared examples that demonstrate the integration with popular Java frameworks - MyBatis, Hibernate, and Spring. Also, a plain Java project example that doesn't use any of the frameworks is available as well. Let's start with the creation of the new project by selecting the menu File -> New -> Other -> Clear, and then press Next. 

[[FIG_2]]
.New CDB Project Wizard
image:fig_02.png[image]

First of all let's call the new project +episode_1_intro+. CDB supports different ways of linking ExtJS framework to the application. In my case, I already have installed ExtJS libraries under my Web server (Apache Tomcat). We're going to use this local ExtJS URL, but you can just specify any folder in your machine and CDB will copy the ExtJS file inside your project. Lastly, you can use ExtJS from the Sencha's CDN, if you don't want to store these libraries inside your project. Besides, using a common CDN will allow Web browser to reuse the cached version of ExtJS. 

For this project we are not going to use any server-side (like MyBatis or Hibernate). Just click the button Finish. First of all, CDB will print some initial messages on the Eclipse console. When CDB runs for the first time it initializes directory structure in the +WebContent+ folder. Inside the WebContent directory CDB creates directory structure which is recommended by Sencha for MVC applications. Also you'll get the HTML wrapper - +index.html+ - for this application, which contains the link to the entry point of our application. 

CDB generates an empty project with one sample controller and one view - +Viewport.js+. To run this application, you need to add the newly generated Dynamic Web Project to Tomcat and start the server (write-click on the Tomcat in the Servers view).  

[[FIG_5]]
.Adding web project to Tomcat
image:fig_05.png[image]

Let me switch to web browser to open this application on +http://localhost:8080/episode_1_intro+ . Voila! Just in couple minutes we've setup new Dynamic Web Project with the ExtJS framework support and one fancy button on UI.

[[FIG_2]]
.Running scaffolded application
image:fig_03.png[image]

<vik>
Let's see what we can do with this application.
</vik>

== Part Two: Generating a CRUD application ==

CRUD stands for Create-Retrieve-Update-Delete. It's a well known term for describing the applications that support data manipulation. They can retrieve the data from some data source and update them too. The Part Two agenda is covering exactly this:

- Create a simple CRUD ExtJS+Java application
    * Create a POJO and corresponding `Ext.data.Model`
    * Create s Java service and populate `Ext.data.Store` with data from service
    * Use the auto-generated ExtJS application
    * Extend the auto-generated CRUD methods
    * Use *ChangeObject*

Now I would like to show how to use Clear Data Builder to create CRUD applications. I'll show you how you can turn your Java POJO class into the ExtJS model. I'll explain the following:

* how you can populate the ExtJS store from a remote service
* how you can use automatically generated UI for that application
* how you can extend it
* what the `ChangeObject` class is for

I will extend the application from Part 1. For my CRUD application I need a Java POJO.  First, I've created the class +Person.java+ in the package `dto`. Then I've added the fields `firstName`, `lastName`, `address`, `ssn` and `phone` and `id`. Also I need getters and setters for these fields. It's good to have a constructor for the that uses these fields,  and a DTO class should have a `toString()` method. <<LISTING_1>> 
Now I need the same corresponding ExtJS model for my +Person+. Just annotate this class with the CDB annotation called `@JSClass` to ask CDB to generate the ExtJS model. 

[[LISTING_1]]
[source,java]
-----------------------------------------------------
include::Person.java[]
-----------------------------------------------------

Now I need to annotate the `id` field with the CDB annotation `@JSGeneratedId`. With this annotation I'll instruct CDB to threat this field as auto generated id. Let's examine the directory of ExtJS MVC application and lets take a look inside the model folder. Inside the model folder (the JavaScript section) we have the folder dto which corresponds to the Java dto package where the class +Person.java+ resides. 

[[FIG_4]]
.Generated from Java class ExtJS model
image:fig_04.png[image]

As you can see Clear Data Builder generated two files. CDB uses the  http://martinfowler.com/dslCatalog/generationGap.html[Generation Gap pattern], which is about keeping the generated and handwritten parts separate by putting them in different classes linked by inheritance. Let's open the person model. In our case the +Person.js+ is extended from the generated +_Person.js+. Should we need to customize this class, we'll do it inside the +Person.js+, but this underscore-prefixed file will be regenerated each and every time when we change something in our model. As you can see here this model contains all the fields from our Person dto. 

Now we need to create the Java service to populate the ExtJS store with the data. Let's create interface in the package `service` with the name `PersonService`. 

TBD

== Part Three: Data Pagination ==

Here is agenda for the Part 3

* Add the  data pagination to our sample CRUD ExtJS+Java application:

    ** Add `Ext.toolbar.Paging` component
    ** Bind _grid_ and _pagingtoolbar_ to same store
    ** Use `DirectOptions` class to read pagination parameters

<vik>
We are going to extend our CRUD application from previous part with adding the paging toolbar component bind to the same store as grid. We are going to use `DirectOptions` class to read pagination parameters on the server side. 

What is the pagination? Pagination is very important thing to know for enterprise web developers. In many cases, you don't want to load all available data in one shot, you want to show only required pieces of your data. This approach allows user to navigate back and forth between pages using different pagination UI components (pagers, _Back_ and _Forward_ buttons). To do that, we need to split our data on the server side into chunks so we can display it only once specific page is required. 

From previous part you've learned how you can generate UI from Java back end service and how we can generate the ExtJS store and ExtJS model.  In this part I'll show you how to add pagination functionality to your application easily and handle this information on the server side an how to send only required data. In this case, I need to refactor service code from previous example. I want to generate a little bit more data than only five records. <<LISTING_2>>

[[LISTING_2]]
[source,java]
----------------------------------------------------------------------

public class PersonServiceImpl extends _PersonServiceImpl {

  @Override
    public List<Person> getPersons() {
        List<Person> result = new ArrayList<>();
        
        for (int i=0; i<1000; i++){
            result.add(new Person(i, "Joe", "Doe", "555-55-55", "1111-11-1111"));
        }
        
        return result;
    }
    
}

----------------------------------------------------------------------

In Google Chrome Console we can see that `PersonStore` was loaded with one thousand records. Let's add the pagination component. And in this case I would like to use Ext `toolbarpaging` component. Let's add it to +sampleApp.js+ file <<LISTING_3>>. In this case I'm interesting in docked items. I would like to reference this component with +xtype+. And +xtype+ of this component is `pagingtoolbar`. I would like to display information and also to dock this element at the top. 

[[LISTING_3]]
[source,javascript]
-----------------------------------------------------
include::sampleApp.js[]
-----------------------------------------------------
</vik>

To help you with repeating all of the above instruction on you own, I've recorded http://faratasystems.com/training-at-farata-youtube-chanel/[the screencasts] where I perform all the actions described in this article.

=== Additional Useful Links ===

* http://farata.github.com/ClearJS/[Clear Toolkit on Github]
* http://cleartoolkit.com/downloads/plugins/extjs/cleardatabuilder/4.1.4/[Clear Data Builder Eclipse update site]
* http://docs.sencha.com/ext-js/4-1/#!/guide/application_architecture[ExtJS MVC Application Architecture]
* http://docs.sencha.com/ext-js/4-1/#!/api/Ext.data.Model[Ext.data.Model]
* http://docs.sencha.com/ext-js/4-1/#!/api/Ext.data.Store[Ext.data.Store]
* http://docs.sencha.com/ext-js/4-1/#!/guide/grid[ExtJS Grid Panel]
* http://docs.sencha.com/ext-js/4-1/#!/api/Ext.toolbar.Paging[Ext.toolbar.Paging]
* http://www.sencha.com/products/extjs/extdirect[Ext Direct]
* https://code.google.com/p/directjngine/[DirectJNgine: Direct for Java]
* https://github.com/Farata/ClearJS/wiki/Change-Object%3A-Synchronization-Keystone[Change Object: Synchronization Keystone]
* https://github.com/Farata/ClearJS/wiki/Data-Pagination[Data Pagination in Clear Toolkit]